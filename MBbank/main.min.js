const clipboard = new ClipboardJS(".copy-text"),
  socket = io();
let i = 0,
  j = 0,
  isBackspacing = !1,
  isParagraph = !1,
  speedForward = 0,
  speedWait = 3e4,
  speedBetweenLines = 10,
  speedBackspace = 0,
  musterTime = setInterval(countDown, 1e3);
function typingEffect(t, e) {
  let a = $(t).children("h1"),
    o = $(t).children("h4");
  if (isBackspacing) {
    if (a.text().length || o.text().length)
      return (
        o.text().length
          ? o.text(o.text().substring(0, o.text().length - 1))
          : o.removeClass("cursor") &&
            a.addClass("cursor") &&
            a.text(a.text().substring(0, a.text().length - 1)),
        void setTimeout(() => typingEffect(t, e), speedBackspace)
      );
    (isBackspacing = !1),
      (i = 0),
      (isParagraph = !1),
      (j = (j + 1) % e.length),
      setTimeout(() => typingEffect(t, e), 50);
  } else if (i < e[j].length) {
    if ("|" == e[j].charAt(i))
      return (
        (isParagraph = !0),
        a.removeClass("cursor"),
        o.addClass("cursor"),
        i++,
        void setTimeout(() => typingEffect(t, e), speedBetweenLines)
      );
    isParagraph
      ? o.text(o.text() + e[j].charAt(i))
      : a.text(a.text() + e[j].charAt(i)),
      i++,
      setTimeout(() => typingEffect(t, e), speedForward);
  } else
    i == e[j].length &&
      ((isBackspacing = !0), setTimeout(() => typingEffect(t, e), speedWait));
}

function getHistory() {
  axios
    .get("../api/v2/getHistory")
    .then((t) => {
      loadHistory(null, t.data);
    })
    .catch((t) => {
      loadHistory(t);
    });
}
function getUserHistory() {
  axios
    .get("../api/v2/getUserHistory")
    .then((t) => {
      loadUserHistory(null, t.data);
    })
    .catch((t) => {
      loadUserHistory(t);
    });
}
function loadQR(t, e, a = "#000000") {
  const o = new QRCodeStyling({
    width: 200,
    height: 200,
    data: t,
    image: e,
    dotsOptions: { color: a, type: "rounded" },
    backgroundOptions: { color: "#FFF" },
    imageOptions: { crossOrigin: "anonymous", margin: 5, imageSize: 0.4 },
  });
  $("#canvasQr").html(""), o.append(document.getElementById("canvasQr"));
}
function getMuster() {
  axios
    .get("../api/v2/muster/session")
    .then((t) => {
      loadMuster(null, t.data);
    })
    .catch((t) => {
      loadMuster(t);
    });
}
function getHistoryMuster() {
  axios
    .get("../api/v2/muster/history")
    .then((t) => {
      loadHistoryMuster(null, t.data);
    })
    .catch((t) => {
      loadHistoryMuster(t);
    });
}
function countDown() {
  let t = $(".muster-time").html();
  if (t < 1) return clearInterval(musterTime) && $(".muster-time").html(0);
  $(".muster-time").html(t - 1);
}
function convertCurrency(t) {
  return t > 999 && t < 1e6
    ? t / 1e3 + "K"
    : t >= 1e6
    ? t / 1e6 + "M"
    : Intl.NumberFormat().format(t);
}
function animate(t, e, a = 200) {
  const o = Number($(t).text().replace(/,/g, "")),
    n = e / a;
  o < e
    ? ($(t).html(Intl.NumberFormat("en-US").format(Math.ceil(o + n))),
      setTimeout(() => animate(t, e), 1))
    : $(t).html(Intl.NumberFormat("en-US").format(e));
}
clipboard.on("success", (t) => numberCopy(t)),
  $(document).ready(function () {
    localStorage.getItem("notification")
      ? Date.now() >= localStorage.getItem("notification") &&
        localStorage.clear("notification")
      : $("#notiModal").modal("show"),
      "true" == isAuthenticated && (getReward(), getUserHistory()),
      getHistory(),
      socket.on("musterData", (t) => {
        t &&
          (loadMuster(null, { success: !0, data: t }),
          clearInterval(musterTime),
          (musterTime = setInterval(countDown, 1e3)));
      }),
      socket.on("historyData", (t) => {
        t && loadHistory(null, { success: !0, data: t });
      }),
      numberAccount &&
        socket.on("historyData_" + numberAccount, (t) => {
          t && loadUserHistory(null, { success: !0, data: t });
        }),
      socket.on("gameData", (t) => {
        t && loadGame(null, { success: !0, data: t });
      }),
      socket.on("rewardData", (t) => {
        t == $(".games.btn-primary").data("type") &&
          loadReward(null, { success: !0, data: t });
      }),
      $("body").on("click", "#closeNoti", (t) =>
        localStorage.setItem("notification", Date.now() + 36e5)
      ),
      $("body").on("click", ".games", function (t) {
        let e = $(this);
        e.removeClass("btn-default"),
          $(".games.btn-primary")
            .removeClass("btn-primary")
            .addClass("btn-default"),
          e.addClass("btn-primary"),
          !e.data("game") && getReward();
      }),
      $("body").on("click", ".qrc", function (t) {
        const e = $(this),
          a = e.data("content"),
          o = e.data("type");
        console.log(a, o),
          loadQR(a, `../themes/images/banks/${o}.png`),
          $("#modal-qr").modal("show");
      }),
      $("body").on("click", "#qr-download", function (t) {
        const e = $("#canvasQr canvas")[0];
        if (e) {
          const t = e
            .toDataURL("image/png")
            .replace("image/png", "image/octet-stream");
          $("<a>", { href: t, download: `qrCode_${Date.now()}.png` })
            .appendTo("body")
            .get(0)
            .click(),
            $(`a[href="${t}"]`).remove();
        }
      }),
      $("body").on("click", "#checkGift button", function (t) {
        let e = $('#checkGift input[name="phone"]').val(),
          a = $('#checkGift input[name="code"]').val();
        checkGift(),
          axios
            .post("../api/v2/checkGift", { phone: e, code: a })
            .then((t) => {
              checkGift(null, null, t.data);
            })
            .catch((t) => {
              checkGift(null, t, null);
            });
      }),
      $("body").on("change", '#jackpot input[name="phone"]', function (t) {
        let e = $('#jackpot input[name="phone"]').val();
        jackpotCheck(),
          axios
            .post("../api/v2/jackpot/checkJoin", { phone: e })
            .then((t) => {
              jackpotCheck(null, null, t.data);
            })
            .catch((t) => {
              jackpotCheck(null, t);
            });
      });
  });
